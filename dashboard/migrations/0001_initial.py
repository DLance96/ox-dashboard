# Generated by Django 3.0.7 on 2020-12-29 02:04

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brother',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=45)),
                ('last_name', models.CharField(max_length=45)),
                ('pronouns', models.CharField(blank=True, choices=[('FEM', 'she/her/hers'), ('MASC', 'he/him/his'), ('NON', 'they/them/theirs')], max_length=4)),
                ('roster_number', models.IntegerField(blank=True, null=True)),
                ('date_pledged', models.DateField(blank=True, null=True)),
                ('school_status', models.CharField(choices=[('FR', 'Freshman'), ('SO', 'Sophomore'), ('JR', 'Junior'), ('SR', 'Senior'), ('FY', 'Fifth Year'), ('AL', 'Alumni')], default='FR', max_length=2)),
                ('brother_status', models.CharField(choices=[('0', 'Candidate'), ('1', 'Brother'), ('2', 'Alumni')], default='0', max_length=1)),
                ('major', models.CharField(default='Undecided', max_length=200)),
                ('minor', models.CharField(blank=True, max_length=200, null=True)),
                ('case_ID', models.CharField(max_length=10)),
                ('birthday', models.DateField()),
                ('hometown', models.CharField(default='Cleveland, OH', max_length=200)),
                ('t_shirt_size', models.CharField(default='M', max_length=5)),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('emergency_contact', models.CharField(default='Chapter President', max_length=200)),
                ('emergency_contact_phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('room_number', models.CharField(default='NA', max_length=3)),
                ('address', models.CharField(default='Theta Chi House', max_length=200)),
                ('does_house_details', models.BooleanField(default=False)),
                ('does_kitchen_details', models.BooleanField(default=False)),
                ('in_house', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=4)),
                ('number', models.CharField(max_length=4)),
                ('brothers', models.ManyToManyField(related_name='classes', to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='DetailGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brothers', models.ManyToManyField(to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Event', max_length=200)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('all_day', models.BooleanField(default=False)),
                ('start_time', models.TimeField(choices=[(datetime.time(9, 0), '9:00 A.M.'), (datetime.time(9, 30), '9:30 A.M.'), (datetime.time(10, 0), '10:00 A.M.'), (datetime.time(10, 30), '10:30 A.M.'), (datetime.time(11, 0), '11:00 A.M.'), (datetime.time(11, 30), '11:30 A.M.'), (datetime.time(12, 0), '12:00 P.M.'), (datetime.time(12, 30), '12:30 P.M.'), (datetime.time(13, 0), '1:00 P.M.'), (datetime.time(13, 30), '1:30 P.M.'), (datetime.time(14, 0), '2:00 P.M.'), (datetime.time(14, 30), '2:30 P.M.'), (datetime.time(15, 0), '3:00 P.M.'), (datetime.time(15, 30), '3:30 P.M.'), (datetime.time(16, 0), '4:00 P.M.'), (datetime.time(16, 30), '4:30 P.M.'), (datetime.time(17, 0), '5:00 P.M.'), (datetime.time(17, 30), '5:30 P.M.'), (datetime.time(18, 0), '6:00 P.M.'), (datetime.time(18, 30), '6:30 P.M.'), (datetime.time(19, 0), '7:00 P.M.'), (datetime.time(19, 30), '7:30 P.M.'), (datetime.time(20, 0), '8:00 P.M.'), (datetime.time(20, 30), '8:30 P.M.')], default=datetime.time(0, 0))),
                ('end_time', models.TimeField(blank=True, choices=[(datetime.time(9, 0), '9:00 A.M.'), (datetime.time(9, 30), '9:30 A.M.'), (datetime.time(10, 0), '10:00 A.M.'), (datetime.time(10, 30), '10:30 A.M.'), (datetime.time(11, 0), '11:00 A.M.'), (datetime.time(11, 30), '11:30 A.M.'), (datetime.time(12, 0), '12:00 P.M.'), (datetime.time(12, 30), '12:30 P.M.'), (datetime.time(13, 0), '1:00 P.M.'), (datetime.time(13, 30), '1:30 P.M.'), (datetime.time(14, 0), '2:00 P.M.'), (datetime.time(14, 30), '2:30 P.M.'), (datetime.time(15, 0), '3:00 P.M.'), (datetime.time(15, 30), '3:30 P.M.'), (datetime.time(16, 0), '4:00 P.M.'), (datetime.time(16, 30), '4:30 P.M.'), (datetime.time(17, 0), '5:00 P.M.'), (datetime.time(17, 30), '5:30 P.M.'), (datetime.time(18, 0), '6:00 P.M.'), (datetime.time(18, 30), '6:30 P.M.'), (datetime.time(19, 0), '7:00 P.M.'), (datetime.time(19, 30), '7:30 P.M.'), (datetime.time(20, 0), '8:00 P.M.'), (datetime.time(20, 30), '8:30 P.M.')], null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('minutes', models.URLField(blank=True, null=True)),
                ('attendees_brothers', models.ManyToManyField(blank=True, to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='MinecraftPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='minecraft')),
            ],
        ),
        migrations.CreateModel(
            name='OnlineMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, unique=True)),
                ('icon', models.ImageField(upload_to='media_icons')),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='photos')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('President', 'President'), ('Vice President', 'Vice President'), ('Vice President of Health and Safety', 'Vice President of Health and Safety'), ('Secretary', 'Secretary'), ('Treasurer', 'Treasurer'), ('Marshal', 'Marshal'), ('Recruitment Chair', 'Recruitment Chair'), ('Scholarship Chair', 'Scholarship Chair'), ('Detail Manager', 'Detail Manager'), ('Philanthropy Chair', 'Philanthropy Chair'), ('Public Relations Chair', 'Public Relations Chair'), ('Service Chair', 'Service Chair'), ('Alumni Relations Chair', 'Alumni Relations Chair'), ('Membership Development Chair', 'Membership Development Chair'), ('Social Chair', 'Social Chair'), ('Community Standards Chair', 'Community Standards Chair'), ('OX Roast Chair', 'OX Roast Chair'), ('Damage Chair', 'Damage Chair'), ('Greek Games Chair', 'Greek Games Chair'), ('Historian', 'Historian'), ('First Guard', 'First Guard'), ('Second Guard', 'Second Guard'), ('Internal Change Chair', 'Internal Change Chair'), ('Standards Board Justice', 'Standards Board Justice'), ('Executive Council Member At Large', 'Executive Council Member At Large'), ('House Manager', 'House Manager'), ('Risk Manager', 'Risk Manager'), ('IFC Rep', 'IFC Rep'), ('Awards Chair', 'Awards Chair'), ('Food Steward', 'Food Steward'), ('Athletics Chair', 'Athletics Chair'), ('Dashboard Chair', 'Dashboard Chair'), ('Adviser', 'Adviser')], max_length=45, unique=True)),
                ('brothers', models.ManyToManyField(to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(choices=[('0', 'Spring'), ('1', 'Summer'), ('2', 'Fall')], default='0', max_length=1)),
                ('year', models.IntegerField(choices=[(2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025)], default=2020)),
            ],
        ),
        migrations.CreateModel(
            name='SundayDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_description', models.CharField(max_length=64)),
                ('long_description', models.TextField()),
                ('done', models.BooleanField(default=False)),
                ('due_date', models.DateField()),
                ('finished_time', models.DateTimeField(null=True)),
                ('finished_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Brother')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Supplies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('what', models.CharField(max_length=256)),
                ('done', models.BooleanField(default=False)),
                ('when', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Supplies',
            },
        ),
        migrations.CreateModel(
            name='ChapterEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
                ('mandatory', models.BooleanField(default=True)),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='CommitteeMeetingEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
                ('recurring', models.BooleanField(default=False)),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='HealthAndSafetyEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='ScholarshipEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='StudyTableEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='ThursdayDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_description', models.CharField(max_length=64)),
                ('long_description', models.TextField()),
                ('done', models.BooleanField(default=False)),
                ('due_date', models.DateField()),
                ('finished_time', models.DateTimeField(null=True)),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Brother')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SundayGroupDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_date', models.DateField()),
                ('details', models.ManyToManyField(to='dashboard.SundayDetail')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.DetailGroup')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Service Event', max_length=200)),
                ('description', models.TextField(default='I did the service thing')),
                ('hours', models.IntegerField(default=0)),
                ('date_applied', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('0', 'Pending'), ('1', 'Awaiting Approval'), ('2', 'Approved'), ('3', 'Denied')], default='0', max_length=1)),
                ('date', models.DateField()),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Brother')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Semester')),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
                ('past_semester_gpa', models.DecimalField(decimal_places=2, default=4.0, max_digits=5)),
                ('cumulative_gpa', models.DecimalField(decimal_places=2, default=4.0, max_digits=5)),
                ('scholarship_plan', models.TextField(default='Scholarship plan has not been setup yet if you past semester GPA or cum GPA are below 3.0 you should setup a meeting to have this corrected')),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Brother')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Semester')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_officer', models.BooleanField(default=True)),
                ('information', models.TextField()),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='dashboard.Brother')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='dashboard.Position')),
            ],
        ),
        migrations.CreateModel(
            name='PotentialNewMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=45)),
                ('last_name', models.CharField(blank=True, max_length=45, null=True)),
                ('case_ID', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('notes', models.TextField(blank=True, null=True)),
                ('primary_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary', to='dashboard.Brother')),
                ('secondary_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary', to='dashboard.Brother')),
                ('tertiary_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tertiary', to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='PhoneTreeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phone_tree_brother', to='dashboard.Brother')),
                ('notified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='phone_tree_notified_by', to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='MeetABrother',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('week', models.DateField(default=django.utils.timezone.now)),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brother_mab', to='dashboard.Brother')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_mab', to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='MediaAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=45)),
                ('profile_link', models.URLField(blank=True, null=True)),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_accounts', to='dashboard.Brother')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='dashboard.OnlineMedia')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F'), ('P', 'AP')], max_length=1)),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='dashboard.Brother')),
                ('class_taken', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Classes')),
            ],
        ),
        migrations.CreateModel(
            name='Excuse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submitted', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(default='I will not be attending because', verbose_name='Reasoning')),
                ('response_message', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('0', 'Pending'), ('1', 'Approved'), ('2', 'Denied'), ('3', 'Non-Mandatory')], default='0', max_length=1)),
                ('brother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Brother')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='semester',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Semester'),
        ),
        migrations.AddField(
            model_name='detailgroup',
            name='semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Semester'),
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('committee', models.CharField(choices=[('AR', 'Alumni Relations'), ('MD', 'Membership Development'), ('PH', 'Philanthropy'), ('PR', 'Public Relations'), ('RE', 'Recruitment'), ('SC', 'Scholarship'), ('SO', 'Social'), ('HS', 'Health And Safety')], max_length=2, unique=True)),
                ('meeting_interval', models.IntegerField(blank=True, choices=[(7, 'Weekly'), (14, 'Biweekly'), (28, 'Monthly')], null=True)),
                ('meeting_day', models.IntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], null=True)),
                ('meeting_time', models.TimeField(blank=True, choices=[(datetime.time(9, 0), '9:00 A.M.'), (datetime.time(9, 30), '9:30 A.M.'), (datetime.time(10, 0), '10:00 A.M.'), (datetime.time(10, 30), '10:30 A.M.'), (datetime.time(11, 0), '11:00 A.M.'), (datetime.time(11, 30), '11:30 A.M.'), (datetime.time(12, 0), '12:00 P.M.'), (datetime.time(12, 30), '12:30 P.M.'), (datetime.time(13, 0), '1:00 P.M.'), (datetime.time(13, 30), '1:30 P.M.'), (datetime.time(14, 0), '2:00 P.M.'), (datetime.time(14, 30), '2:30 P.M.'), (datetime.time(15, 0), '3:00 P.M.'), (datetime.time(15, 30), '3:30 P.M.'), (datetime.time(16, 0), '4:00 P.M.'), (datetime.time(16, 30), '4:30 P.M.'), (datetime.time(17, 0), '5:00 P.M.'), (datetime.time(17, 30), '5:30 P.M.'), (datetime.time(18, 0), '6:00 P.M.'), (datetime.time(18, 30), '6:30 P.M.'), (datetime.time(19, 0), '7:00 P.M.'), (datetime.time(19, 30), '7:30 P.M.'), (datetime.time(20, 0), '8:00 P.M.'), (datetime.time(20, 30), '8:30 P.M.')])),
                ('chair', models.OneToOneField(limit_choices_to=models.Q(('title', 'Vice President of Health and Safety'), ('title', 'Recruitment Chair'), ('title', 'Scholarship Chair'), ('title', 'Philanthropy Chair'), ('title', 'Public Relations Chair'), ('title', 'Alumni Relations Chair'), ('title', 'Membership Development Chair'), ('title', 'Social Chair'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='dashboard.Position')),
                ('members', models.ManyToManyField(blank=True, to='dashboard.Brother')),
            ],
        ),
        migrations.CreateModel(
            name='CampusGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45)),
                ('brothers', models.ManyToManyField(related_name='groups', to='dashboard.Brother')),
            ],
        ),
        migrations.AddField(
            model_name='brother',
            name='semester_graduating',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brother_graduating', to='dashboard.Semester'),
        ),
        migrations.AddField(
            model_name='brother',
            name='semester_joined',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Semester'),
        ),
        migrations.AddField(
            model_name='brother',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ServiceEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
                ('rsvp_brothers', models.ManyToManyField(blank=True, related_name='rsvp_service', to='dashboard.Brother')),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='RecruitmentEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
                ('rush', models.BooleanField(default=True)),
                ('picture', models.ImageField(null=True, upload_to='recruitment')),
                ('location', models.TextField(blank=True, null=True)),
                ('attendees_pnms', models.ManyToManyField(blank=True, to='dashboard.PotentialNewMember')),
            ],
            bases=('dashboard.event',),
        ),
        migrations.CreateModel(
            name='PhilanthropyEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Event')),
                ('rsvp_brothers', models.ManyToManyField(blank=True, related_name='rsvp_philanthropy', to='dashboard.Brother')),
            ],
            bases=('dashboard.event',),
        ),
        migrations.AddConstraint(
            model_name='meetabrother',
            constraint=models.UniqueConstraint(fields=('brother', 'candidate'), name='unique_meet_a_brother'),
        ),
        migrations.AddConstraint(
            model_name='grade',
            constraint=models.UniqueConstraint(fields=('class_taken', 'brother'), name='unique_grade'),
        ),
        migrations.AddField(
            model_name='excuse',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.ChapterEvent'),
        ),
        migrations.AddField(
            model_name='committeemeetingevent',
            name='committee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='meetings', to='dashboard.Committee'),
        ),
    ]
